/*
  Auto generated by version 0.0 of material_constant_generator.py
  on geop-318.ethz.ch, at 2015-09-23 11:03:55.696843 by dmay
*/

#ifndef __EnergyMaterialConstants_DEF_H__
#define __EnergyMaterialConstants_DEF_H__

typedef struct {
 double alpha;
 double beta;
 double rho_ref;
 double Cp;
 int density_type;
 int conductivity_type;
 int source_type[7];
} EnergyMaterialConstants;

typedef enum {
  EnergyMaterialConstants_ThermalExpansivity = 0,
  EnergyMaterialConstants_Compressibility,
  EnergyMaterialConstants_ReferenceDensity,
  EnergyMaterialConstants_SpecificHeat,
  EnergyMaterialConstants_DensityMethod,
  EnergyMaterialConstants_ConductivityMethod,
  EnergyMaterialConstants_SourceMethod
} EnergyMaterialConstantsTypeName;

extern const char EnergyMaterialConstants_classname[];

extern const int EnergyMaterialConstants_nmembers;

extern const size_t EnergyMaterialConstants_member_sizes[];

extern const char *EnergyMaterialConstants_member_names[];

/* prototypes */
void EnergyMaterialConstantsGetField_ThermalExpansivity(EnergyMaterialConstants *point,double *data);
void EnergyMaterialConstantsGetField_Compressibility(EnergyMaterialConstants *point,double *data);
void EnergyMaterialConstantsGetField_ReferenceDensity(EnergyMaterialConstants *point,double *data);
void EnergyMaterialConstantsGetField_SpecificHeat(EnergyMaterialConstants *point,double *data);
void EnergyMaterialConstantsGetField_DensityMethod(EnergyMaterialConstants *point,int *data);
void EnergyMaterialConstantsGetField_ConductivityMethod(EnergyMaterialConstants *point,int *data);
void EnergyMaterialConstantsGetField_SourceMethod(EnergyMaterialConstants *point,int *data[]);
void EnergyMaterialConstantsSetField_ThermalExpansivity(EnergyMaterialConstants *point,double data);
void EnergyMaterialConstantsSetField_Compressibility(EnergyMaterialConstants *point,double data);
void EnergyMaterialConstantsSetField_ReferenceDensity(EnergyMaterialConstants *point,double data);
void EnergyMaterialConstantsSetField_SpecificHeat(EnergyMaterialConstants *point,double data);
void EnergyMaterialConstantsSetField_DensityMethod(EnergyMaterialConstants *point,int data);
void EnergyMaterialConstantsSetField_ConductivityMethod(EnergyMaterialConstants *point,int data);
void EnergyMaterialConstantsSetField_SourceMethod(EnergyMaterialConstants *point,int data[]);
void EnergyMaterialConstantsView(EnergyMaterialConstants *point);

void EnergyMaterialConstantsGetDefault_ThermalExpansivity(double *data);
void EnergyMaterialConstantsGetDefault_Compressibility(double *data);
void EnergyMaterialConstantsGetDefault_ReferenceDensity(double *data);
void EnergyMaterialConstantsGetDefault_SpecificHeat(double *data);
void EnergyMaterialConstantsGetDefault_DensityMethod(int *data);
void EnergyMaterialConstantsGetDefault_ConductivityMethod(int *data);
void EnergyMaterialConstantsGetDefault_SourceMethod(int *data);
void MaterialConstantsSetDefaultAll_EnergyMaterialConstants(int nr,EnergyMaterialConstants _data[]);
PetscErrorCode MaterialConstantsSetFromOptions_EnergyMaterialConstants(const char model_name[],const int region_id,EnergyMaterialConstants _data[],PetscBool essential);
PetscErrorCode MaterialConstantsPrintValues_EnergyMaterialConstants(const char model_name[],const int region_id,EnergyMaterialConstants _data[]);
PetscErrorCode MaterialConstantsSetValues_EnergyMaterialConstants(const int region_id,EnergyMaterialConstants _data[],double alpha,double beta,double rho_ref,double Cp,int density_type,int conductivity_type,int *source_type);
PetscErrorCode MaterialConstantsScaleValues_EnergyMaterialConstants(const int region_id,EnergyMaterialConstants _data[],double alpha,double beta,double rho_ref,double Cp);

void EnergyMaterialConstantsSetFieldByIndex_SourceMethod(EnergyMaterialConstants *point,int index,int value);
void EnergyMaterialConstantsSetFieldAll_SourceMethod(EnergyMaterialConstants *point,int value);

#endif
