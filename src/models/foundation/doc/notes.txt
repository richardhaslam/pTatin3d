
Validate an existing JSON file using the online tool at
  http://jsonlint.com/


Introduction:

* JSON (Java Script Object Notation)
* No comments are allowed directly - must use a special field
* Last item in object MUST not possess a comma after it
* Case insensitive

* Always best to validate JSON before running pTatin - error reporting from cJSON
can be obscure. This has the potential to make tracking down the syntax mistake 
difficult

------------------------------

Required fields:

All files must contain the following object

{
"pTatinFoundation": {}
};

All other objects must be embedded within "pTatinFoundation": {}

------------------------------
"MaterialModelMetaData": {
    "MaterialMetaDataFile": "path/to/file" <optional>
}

"RegionList": [
 {},
 {}
]

{
  "index": 1,
  "ViscousFlowLaw": {},
  "YieldFunction": {},
  "StrainSoftening": {},
  "Density": {}
}

ViscousFlowLaw = "const", "frankkamentskii", "arrhenius", "arrhenius2", "DepthDependent"
YieldFunction = "none", "mises", "duckerprager", "misesh", "druckerpragerh"
StrainSoftening = "none", "linear", "exponential"
Density = "const", "Boussinesq"

------------------------------
"MatGeomICType": {}

"MeshGeomICType": {}

"ModelUnits": {}

"pTatinParamaters": {}




<Optional objects>

"MaterialPointStateIC": [
 {},
 {}
]

{
  "Density": {
    "RegionIndex": [1, 2],
    "Const": {
      "value": [2.3, 44.0]
    }
  }
}

Field = "density", "viscosity", "plasticstrain", "diffusivity", "heatsource"


"SolverOptionsFile": "path/to/file"





Adding comments to JSON files:
Within any object, you can attach a comment using any of the following keywords

  "description": "You should describe your model in your JSON file",

  "comment": "This is not a comment",

  "doc": "Documentation in scientific code is always non-existant",

  "note": "There are no notes to report",

  "help": "Good users don't need help",



----------------------------

Registering user variables and user functions

* Variables
Variables can be registerd in a JSON object called "FoundationUserVariables".
The type of the data is identified via the keyword "datatype": "xxx"
- Valid definitions of "xxx" include "int", "float" and "double".
- Each user variable must be provided with a name.
Within a datatype group, the textual name must be unique. 
- The textual name may be re-used between different datatype groups
- Multiple fields of the same datatype can be defined in a single struct
- Multiple instances of the same datatype can be declared with "FoundationUserVariables"


"FoundationUserVariables": [
  {
    "datatype": "double",
    "a": 11.1,
    "b": 12.3,
  },
  {
    "datatype": "double",
    "var1": 14.134153
  },
  {
    "datatype": "float",
    "a": 14.1,
  },
  {
    "datatype": "int",
    "a": 11
  }
]

* User functions

- Functions should be defined in their own file, living in the directory
  src/models/foundation/usersandbox
- Files must be added into list defined with the makefile 
  src/models/foundation/usersandbox/local.mk
- Functions must be registered within the file
  src/models/foundation/foundation_userfunctions_reg.c






