
/*
  Auto generated by version 0.0 of swarm_class_generator.py
  on geop-265.ethz.ch, at 2015-08-26 11:07:17.895002 by dmay
*/

#ifndef __QPntVolCoefSymTens_DEF_H__
#define __QPntVolCoefSymTens_DEF_H__

#include <mpi.h>

typedef struct {
 double T[6];
} QPntVolCoefSymTens;

typedef enum {
  QPVCSymTens_symmetric_tensor = 0
} QPntVolCoefSymTensTypeName;

extern const char QPntVolCoefSymTens_classname[];

extern const int QPntVolCoefSymTens_nmembers;

extern const size_t QPntVolCoefSymTens_member_sizes[];

extern const char *QPntVolCoefSymTens_member_names[];

extern MPI_Datatype MPI_QPNTVOLCOEFSYMTENS;

/* prototypes */
void QPntVolCoefSymTensGetField_symmetric_tensor(QPntVolCoefSymTens *point,double *data[]);
void QPntVolCoefSymTensSetField_symmetric_tensor(QPntVolCoefSymTens *point,double data[]);
void QPntVolCoefSymTensView(QPntVolCoefSymTens *point);
void QPntVolCoefSymTensVTKWriteAsciiAllFields(FILE *vtk_fp,const int N,const QPntVolCoefSymTens points[]);
void QPntVolCoefSymTensPVTUWriteAllPPointDataFields(FILE *vtk_fp);
void QPntVolCoefSymTensVTKWriteBinaryAppendedHeaderAllFields(FILE *vtk_fp,int *offset,const int N,const QPntVolCoefSymTens points[]);
void QPntVolCoefSymTensVTKWriteBinaryAppendedDataAllFields(FILE *vtk_fp,const int N,const QPntVolCoefSymTens points[]);
int QPntVolCoefSymTensCreateMPIDataType(MPI_Datatype *ptype);

#endif
