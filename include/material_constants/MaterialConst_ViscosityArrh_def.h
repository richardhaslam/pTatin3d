/*@ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 **
 **    Copyright (c) 2012
 **        Dave A. May [dave.may@erdw.ethz.ch]
 **        Institute of Geophysics
 **        ETH Zürich
 **        Sonneggstrasse 5
 **        CH-8092 Zürich
 **        Switzerland
 **
 **    project:    pTatin3d
 **    filename:   MaterialConst_ViscosityArrh_def.h
 **
 **
 **    pTatin3d is free software: you can redistribute it and/or modify
 **    it under the terms of the GNU General Public License as published
 **    by the Free Software Foundation, either version 3 of the License,
 **    or (at your option) any later version.
 **
 **    pTatin3d is distributed in the hope that it will be useful,
 **    but WITHOUT ANY WARRANTY; without even the implied warranty of
 **    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 **    See the GNU General Public License for more details.
 **
 **    You should have received a copy of the GNU General Public License
 **    along with pTatin3d. If not, see <http://www.gnu.org/licenses/>.
 **
 ** ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ @*/
/*
  Auto generated by version 0.0 of swarm_class_generator.py
  on les-MacBook-Pro.local, at 2013-03-10 16:15:11.875122 by laetitia
*/


#ifndef __MaterialConst_ViscosityArrh_DEF_H__
#define __MaterialConst_ViscosityArrh_DEF_H__

typedef struct {
  double preexpA ;
  double Ascale ;
  double entalpy ;
  double Vmol ;
  double nexp ;
  double Tref ;
  double Eta_scale ;
  double P_scale ;
} MaterialConst_ViscosityArrh ;


typedef enum {
  ViscosityArrh_preexpA = 0,
  ViscosityArrh_Ascale,
  ViscosityArrh_entalpy,
  ViscosityArrh_Vmol,
  ViscosityArrh_nexp,
  ViscosityArrh_Tref,
  ViscosityArrh_Eta_scale,
  ViscosityArrh_P_scale
} MaterialConst_ViscosityArrhTypeName ;


extern const char MaterialConst_ViscosityArrh_classname[];

extern const int MaterialConst_ViscosityArrh_nmembers;

extern const size_t MaterialConst_ViscosityArrh_member_sizes[];

extern const char *MaterialConst_ViscosityArrh_member_names[];

/* prototypes */
void MaterialConst_ViscosityArrhGetField_preexpA(MaterialConst_ViscosityArrh *point,double *data);
void MaterialConst_ViscosityArrhGetField_Ascale(MaterialConst_ViscosityArrh *point,double *data);
void MaterialConst_ViscosityArrhGetField_entalpy(MaterialConst_ViscosityArrh *point,double *data);
void MaterialConst_ViscosityArrhGetField_Vmol(MaterialConst_ViscosityArrh *point,double *data);
void MaterialConst_ViscosityArrhGetField_nexp(MaterialConst_ViscosityArrh *point,double *data);
void MaterialConst_ViscosityArrhGetField_Tref(MaterialConst_ViscosityArrh *point,double *data);
void MaterialConst_ViscosityArrhGetField_Eta_scale(MaterialConst_ViscosityArrh *point,double *data);
void MaterialConst_ViscosityArrhGetField_P_scale(MaterialConst_ViscosityArrh *point,double *data);
void MaterialConst_ViscosityArrhSetField_preexpA(MaterialConst_ViscosityArrh *point,double data);
void MaterialConst_ViscosityArrhSetField_Ascale(MaterialConst_ViscosityArrh *point,double data);
void MaterialConst_ViscosityArrhSetField_entalpy(MaterialConst_ViscosityArrh *point,double data);
void MaterialConst_ViscosityArrhSetField_Vmol(MaterialConst_ViscosityArrh *point,double data);
void MaterialConst_ViscosityArrhSetField_nexp(MaterialConst_ViscosityArrh *point,double data);
void MaterialConst_ViscosityArrhSetField_Tref(MaterialConst_ViscosityArrh *point,double data);
void MaterialConst_ViscosityArrhSetField_Eta_scale(MaterialConst_ViscosityArrh *point,double data);
void MaterialConst_ViscosityArrhSetField_P_scale(MaterialConst_ViscosityArrh *point,double data);
void MaterialConst_ViscosityArrhView(MaterialConst_ViscosityArrh *point);
void MaterialConst_ViscosityArrhVTKWriteAsciiAllFields(FILE *vtk_fp,const int N,const MaterialConst_ViscosityArrh points[]);
void MaterialConst_ViscosityArrhPVTUWriteAllPPointDataFields(FILE *vtk_fp);
void MaterialConst_ViscosityArrhVTKWriteBinaryAppendedHeaderAllFields(FILE *vtk_fp,int *offset,const int N,const MaterialConst_ViscosityArrh points[]);
void MaterialConst_ViscosityArrhVTKWriteBinaryAppendedDataAllFields(FILE *vtk_fp,const int N,const MaterialConst_ViscosityArrh points[]);

#endif
