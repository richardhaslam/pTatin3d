/*@ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 **
 **    Copyright (c) 2012
 **        Dave A. May [dave.may@erdw.ethz.ch]
 **        Institute of Geophysics
 **        ETH Zürich
 **        Sonneggstrasse 5
 **        CH-8092 Zürich
 **        Switzerland
 **
 **    project:    pTatin3d
 **    filename:   MaterialConst_SoftExpo_def.h
 **
 **
 **    pTatin3d is free software: you can redistribute it and/or modify
 **    it under the terms of the GNU General Public License as published
 **    by the Free Software Foundation, either version 3 of the License,
 **    or (at your option) any later version.
 **
 **    pTatin3d is distributed in the hope that it will be useful,
 **    but WITHOUT ANY WARRANTY; without even the implied warranty of
 **    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 **    See the GNU General Public License for more details.
 **
 **    You should have received a copy of the GNU General Public License
 **    along with pTatin3d. If not, see <http://www.gnu.org/licenses/>.
 **
 ** ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ @*/
/*
  Auto generated by version 0.0 of swarm_class_generator.py
  on les-MacBook-Pro.local, at 2013-03-08 17:43:59.347260 by laetitia
*/


#ifndef __MaterialConst_SoftExpo_DEF_H__
#define __MaterialConst_SoftExpo_DEF_H__

typedef struct {
  double eps_min ;
  double eps_fold ;
} MaterialConst_SoftExpo ;


typedef enum {
  SoftExpo_eps_min = 0,
  SoftExpo_eps_fold
} MaterialConst_SoftExpoTypeName ;


extern const char MaterialConst_SoftExpo_classname[];

extern const int MaterialConst_SoftExpo_nmembers;

extern const size_t MaterialConst_SoftExpo_member_sizes[];

extern const char *MaterialConst_SoftExpo_member_names[];

/* prototypes */
void MaterialConst_SoftExpoGetField_eps_min(MaterialConst_SoftExpo *point,double *data);
void MaterialConst_SoftExpoGetField_eps_fold(MaterialConst_SoftExpo *point,double *data);
void MaterialConst_SoftExpoSetField_eps_min(MaterialConst_SoftExpo *point,double data);
void MaterialConst_SoftExpoSetField_eps_fold(MaterialConst_SoftExpo *point,double data);
void MaterialConst_SoftExpoView(MaterialConst_SoftExpo *point);
void MaterialConst_SoftExpoVTKWriteAsciiAllFields(FILE *vtk_fp,const int N,const MaterialConst_SoftExpo points[]);
void MaterialConst_SoftExpoPVTUWriteAllPPointDataFields(FILE *vtk_fp);
void MaterialConst_SoftExpoVTKWriteBinaryAppendedHeaderAllFields(FILE *vtk_fp,int *offset,const int N,const MaterialConst_SoftExpo points[]);
void MaterialConst_SoftExpoVTKWriteBinaryAppendedDataAllFields(FILE *vtk_fp,const int N,const MaterialConst_SoftExpo points[]);

#endif
