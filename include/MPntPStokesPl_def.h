/*@ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 **
 **    Copyright (c) 2012
 **        Dave A. May [dave.may@erdw.ethz.ch]
 **        Institute of Geophysics
 **        ETH Zürich
 **        Sonneggstrasse 5
 **        CH-8092 Zürich
 **        Switzerland
 **
 **    project:    pTatin3d
 **    filename:   MPntPStokesPl_def.h
 **
 **
 **    pTatin3d is free software: you can redistribute it and/or modify
 **    it under the terms of the GNU General Public License as published
 **    by the Free Software Foundation, either version 3 of the License,
 **    or (at your option) any later version.
 **
 **    pTatin3d is distributed in the hope that it will be useful,
 **    but WITHOUT ANY WARRANTY; without even the implied warranty of
 **    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 **    See the GNU General Public License for more details.
 **
 **    You should have received a copy of the GNU General Public License
 **    along with pTatin3d. If not, see <http://www.gnu.org/licenses/>.
 **
 ** ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ @*/
/*
  Auto generated by version 0.0 of swarm_class_generator.py
  on musashi.ethz.ch, at 2013-02-27 18:40:06.481069 by dmay
*/


#ifndef __MPntPStokesPl_DEF_H__
#define __MPntPStokesPl_DEF_H__

typedef struct {
  float e_plastic ;
  short is_yielding ;
} MPntPStokesPl ;


typedef enum {
  MPPStkPl_plastic_strain = 0,
  MPPStkPl_yield_indicator
} MPntPStokesPlTypeName ;


extern const char MPntPStokesPl_classname[];

extern const int MPntPStokesPl_nmembers;

extern const size_t MPntPStokesPl_member_sizes[];

extern const char *MPntPStokesPl_member_names[];

/* prototypes */
void MPntPStokesPlGetField_plastic_strain(MPntPStokesPl *point,float *data);
void MPntPStokesPlGetField_yield_indicator(MPntPStokesPl *point,short *data);
void MPntPStokesPlSetField_plastic_strain(MPntPStokesPl *point,float data);
void MPntPStokesPlSetField_yield_indicator(MPntPStokesPl *point,short data);
void MPntPStokesPlView(MPntPStokesPl *point);
void MPntPStokesPlVTKWriteAsciiAllFields(FILE *vtk_fp,const int N,const MPntPStokesPl points[]);
void MPntPStokesPlPVTUWriteAllPPointDataFields(FILE *vtk_fp);
void MPntPStokesPlVTKWriteBinaryAppendedHeaderAllFields(FILE *vtk_fp,int *offset,const int N,const MPntPStokesPl points[]);
void MPntPStokesPlVTKWriteBinaryAppendedDataAllFields(FILE *vtk_fp,const int N,const MPntPStokesPl points[]);

#endif

